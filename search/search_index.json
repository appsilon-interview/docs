{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Appsilon Interview Documentation \u00b6 General Information \u00b6 For requirements, general consideration and overview of this project, set-up information and chosen technical stack, please see our Getting Started guide. Infrastructure Architecture \u00b6 For detailed infrastructure architecture (AWS) and how things are deployed using Terraform, please see our infrastructure architecture page. Deploying Example Environment \u00b6 For detailed examples about what this projects can do and how example staging environment can be spinned up, please see our documentation by example page.","title":"Overview"},{"location":"#appsilon-interview-documentation","text":"","title":"Appsilon Interview Documentation"},{"location":"#general-information","text":"For requirements, general consideration and overview of this project, set-up information and chosen technical stack, please see our Getting Started guide.","title":"General Information"},{"location":"#infrastructure-architecture","text":"For detailed infrastructure architecture (AWS) and how things are deployed using Terraform, please see our infrastructure architecture page.","title":"Infrastructure Architecture"},{"location":"#deploying-example-environment","text":"For detailed examples about what this projects can do and how example staging environment can be spinned up, please see our documentation by example page.","title":"Deploying Example Environment"},{"location":"deploy-environment-example/","text":"Deploy Environment Example \u00b6 Building Application Docker Image \u00b6 Prior to deploying application, Docker image should be built first. To build the image, clone the repository: $ git clone git@github.com:appsilon-interview/app.git $ cd app And run: $ make build To push image to DockerHub, you'll need to log into DockerHub first: $ export DOCKER_PASSWORD = <your dockerhub password> $ export DOCKER_USERNAME = <your dockerhub username> $ echo \" ${ DOCKER_PASSWORD } \" | docker login --username \" $DOCKER_USERNAME \" --password-stdin Tag and push image: $ make publish Deploying infrastructure \u00b6 A terraform module to deploy a secure, functional staging environment on AWS . Dependencies \u00b6 The following is required to be installed on your system: terraform awscli Deployment \u00b6 To deploy infrastructure, clone the repository: $ git clone git@github.com:appsilon-interview/terraform.git $ cd terraform Configure your access and secret key within awscli , specifying region and default output: $ aws configure Using your favourite editor, update values in terraform.tfvars to suit your needs. $ vim terraform.tfvars region = \"eu-west-2\" domain = \"kloud-native.net\" appsilon_subdomain = <subdomain for your application> rds_username = <database username> rds_password = <database password> rds_db_name = \"<database name> rds_instance = \" db.t2.micro \" appsilon_version_tag = <docker tag of your built image> Run terraform init to initalize modules: $ terraform init Run terraform plan to view changes terraform will make: $ terraform plan Run terraform apply to create your resources: $ terraform apply -auto-approve Run terraform destroy to destroy your resources: $ terraform destroy -auto-aprove","title":"Example"},{"location":"deploy-environment-example/#deploy-environment-example","text":"","title":"Deploy Environment Example"},{"location":"deploy-environment-example/#building-application-docker-image","text":"Prior to deploying application, Docker image should be built first. To build the image, clone the repository: $ git clone git@github.com:appsilon-interview/app.git $ cd app And run: $ make build To push image to DockerHub, you'll need to log into DockerHub first: $ export DOCKER_PASSWORD = <your dockerhub password> $ export DOCKER_USERNAME = <your dockerhub username> $ echo \" ${ DOCKER_PASSWORD } \" | docker login --username \" $DOCKER_USERNAME \" --password-stdin Tag and push image: $ make publish","title":"Building Application Docker Image"},{"location":"deploy-environment-example/#deploying-infrastructure","text":"A terraform module to deploy a secure, functional staging environment on AWS .","title":"Deploying infrastructure"},{"location":"deploy-environment-example/#dependencies","text":"The following is required to be installed on your system: terraform awscli","title":"Dependencies"},{"location":"deploy-environment-example/#deployment","text":"To deploy infrastructure, clone the repository: $ git clone git@github.com:appsilon-interview/terraform.git $ cd terraform Configure your access and secret key within awscli , specifying region and default output: $ aws configure Using your favourite editor, update values in terraform.tfvars to suit your needs. $ vim terraform.tfvars region = \"eu-west-2\" domain = \"kloud-native.net\" appsilon_subdomain = <subdomain for your application> rds_username = <database username> rds_password = <database password> rds_db_name = \"<database name> rds_instance = \" db.t2.micro \" appsilon_version_tag = <docker tag of your built image> Run terraform init to initalize modules: $ terraform init Run terraform plan to view changes terraform will make: $ terraform plan Run terraform apply to create your resources: $ terraform apply -auto-approve Run terraform destroy to destroy your resources: $ terraform destroy -auto-aprove","title":"Deployment"},{"location":"getting-started/","text":"Getting Started \u00b6 This project serves as a fully working and tested solution for deploying staging environment for R-Shiny application into AWS. Technologies used \u00b6 Terraform 1 is used to provision infrastructure resources like VPC, compute instances, DNS records, RDS instance and many more. AWS 2 public cloud is used as a Cloud provider of choice. R-Shiny 3 is used as a framework to deploy an example application. All Docker images are stored in public DockerHub 4 registry. Entire source code is stored in GitHub 's appsilon-interview organisation. GitHub Actions 5 are used for continuous integration, running tests, building application's Docker image, linting and static validation of IaaC code for potential security issues. Use Infrastructure as Code to provision and manage any cloud, infrastructure, or service. \u21a9 The Amazon AWS offers you a large number of cloud solutions that are billed on a pay-as-you-go basis. \u21a9 Shiny is an R package that makes it easy to build interactive web apps straight from R. \u21a9 Storing and distribution system for named Docker images. \u21a9 GitHub Actions enables you to create custom software development life cycle (SDLC) workflows directly in your GitHub repository. \u21a9","title":"Getting started"},{"location":"getting-started/#getting-started","text":"This project serves as a fully working and tested solution for deploying staging environment for R-Shiny application into AWS.","title":"Getting Started"},{"location":"getting-started/#technologies-used","text":"Terraform 1 is used to provision infrastructure resources like VPC, compute instances, DNS records, RDS instance and many more. AWS 2 public cloud is used as a Cloud provider of choice. R-Shiny 3 is used as a framework to deploy an example application. All Docker images are stored in public DockerHub 4 registry. Entire source code is stored in GitHub 's appsilon-interview organisation. GitHub Actions 5 are used for continuous integration, running tests, building application's Docker image, linting and static validation of IaaC code for potential security issues. Use Infrastructure as Code to provision and manage any cloud, infrastructure, or service. \u21a9 The Amazon AWS offers you a large number of cloud solutions that are billed on a pay-as-you-go basis. \u21a9 Shiny is an R package that makes it easy to build interactive web apps straight from R. \u21a9 Storing and distribution system for named Docker images. \u21a9 GitHub Actions enables you to create custom software development life cycle (SDLC) workflows directly in your GitHub repository. \u21a9","title":"Technologies used"},{"location":"infrastructure-architecture/","text":"Infrastructure Architecture \u00b6 Terraform Infrastructure Overview \u00b6","title":"Infrastructure"},{"location":"infrastructure-architecture/#infrastructure-architecture","text":"","title":"Infrastructure Architecture"},{"location":"infrastructure-architecture/#terraform-infrastructure-overview","text":"","title":"Terraform Infrastructure Overview"}]}